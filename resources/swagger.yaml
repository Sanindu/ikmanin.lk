swagger: "2.0"
info:
  description: "This is a bike selling advertisement site server."
  version: "1.0.0"
  title: "BikeSale.LK"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "imwageesha@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "bikesale.swagger.io"
basePath: "/v2"
tags:
  - name: "advertiesment"
    description: "Everything about your bikes"
  - name: "advertiesment_store"
    description: "Access to all bike advertiesments"
  - name: "user"
    description: "Operations about user"

schemes:
  - "https"
  - "http"
paths:
  /advertiesments:
    post:
      tags:
        - "advertiesment"
      summary: "Add a new bike advertiesment to the advertiesment store"
      description: ""
      operationId: "addAdvertiesment"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "advertiesment object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Advertiesment"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    patch:
      tags:
        - "advertiesment"
      summary: "Update an existing advertiesment"
      description: ""
      operationId: "updateAdvertiesment"
      consumes:
        - "application/json"
        - "application/xml"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Advertiesment object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Advertiesment"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    get:
      tags:
        - "advertiesment"
      summary: "Finds advertiesments by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findAdvertiesmentsByStatus"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "status"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: false
          type: "array"
          items:
            type: "string"
            enum:
              - "available"
              - "pending"
              - "sold"
            default: "available"
          collectionFormat: "multi"
        - name: "tags"
          in: "query"
          description: "Tags to filter by"
          required: false
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
        - name: "time-range"
          in: "query"
          description: "Status values that need to be considered for filter"
          required: false
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Advertiesment"
        400:
          description: "Invalid status value"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /advertiesments/{advertiesmentId}:
    get:
      tags:
        - "advertiesment"
      summary: "Find advertiesment by ID"
      description: "Returns a single advertiesment"
      operationId: "getAdvertiesmentById"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "advertiesmentId"
          in: "path"
          description: "ID of advertiesment to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Advertiesment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
        - api_key: []
    patch:
      tags:
        - "advertiesment"
      summary: "Updates a advertiesment in the store with form data"
      description: ""
      operationId: "updateAdvertiesmentWithForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "advertiesmentId"
          in: "path"
          description: "ID of pet that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "description"
          in: "formData"
          description: "Updated description of the advertiesment"
          required: false
          type: "string"
        - name: "status"
          in: "formData"
          description: "Updated status of the advertiesment"
          required: false
          type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
    delete:
      tags:
        - "advertiesment"
      summary: "Deletes a advertiesment"
      description: ""
      operationId: "deleteAdvertiesment"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "advertiesmentId"
          in: "path"
          description: "advertiesment id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "advertiesment not found"
      security:
        - petstore_auth:
            - "write:pets"
            - "read:pets"
  /users/{user-id}/advertiesments:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - in: "path"
          name: "user-id"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /login:
    get:
      tags:
        - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "The user name for login"
          required: true
          type: "string"
        - name: "password"
          in: "query"
          description: "The password for login in clear text"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /logout:
    get:
      tags:
        - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      gender:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      dob:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      district:
        type: "string"
      address:
        type: "string"
      userPhoto:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"

  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"

  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"

  Advertiesment:
    type: "object"
    required:
      - "description"
      - "photos"
      - "timestamp"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      Description:
        type: "string"
      photos:
        type: "array"
        xml:
          name: "photos"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "bike status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
      timestamp:
        type: "string"
    xml:
      name: "Pet"

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
